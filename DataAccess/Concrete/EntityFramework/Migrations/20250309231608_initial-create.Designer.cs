// <auto-generated />
using DataAccess.Concrete.EntityFramework.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DataAccess.Concrete.EntityFramework.Migrations
{
    [DbContext(typeof(ECommerceContext))]
    [Migration("20250309231608_initial-create")]
    partial class initialcreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Core.Entities.Concrete.Admin", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.HasKey("Id");

                    b.ToTable("Admins", "dbo");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Email = "admin@admin.com",
                            FirstName = "Admin",
                            LastName = "Admin",
                            PasswordHash = new byte[] { 145, 178, 101, 166, 68, 201, 185, 31, 101, 140, 55, 56, 222, 116, 166, 81, 96, 118, 66, 149, 183, 49, 47, 105, 7, 143, 87, 108, 255, 43, 190, 4, 212, 80, 242, 42, 109, 49, 248, 255, 211, 67, 84, 51, 55, 226, 202, 119, 75, 176, 75, 26, 79, 90, 128, 104, 41, 140, 16, 177, 236, 35, 11, 53 },
                            PasswordSalt = new byte[] { 35, 255, 44, 154, 168, 32, 223, 137, 185, 204, 137, 100, 174, 230, 75, 219, 243, 245, 143, 83, 19, 80, 156, 129, 5, 216, 77, 211, 219, 162, 30, 3, 25, 14, 90, 143, 170, 81, 8, 98, 127, 213, 242, 130, 90, 4, 108, 141, 175, 150, 10, 199, 220, 217, 56, 111, 63, 5, 49, 80, 53, 10, 80, 11, 193, 19, 99, 6, 247, 151, 150, 217, 112, 207, 159, 148, 38, 248, 168, 48, 86, 38, 50, 64, 118, 233, 142, 40, 117, 152, 90, 53, 141, 185, 118, 143, 231, 111, 199, 103, 41, 201, 161, 1, 233, 253, 186, 118, 212, 240, 194, 108, 204, 13, 121, 3, 110, 75, 148, 130, 80, 226, 211, 111, 247, 236, 149, 54 }
                        });
                });

            modelBuilder.Entity("Core.Entities.Concrete.AdminOperationClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AdminId")
                        .HasColumnType("int");

                    b.Property<int>("OperationClaimId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("AdminOperationClaims", "dbo");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AdminId = 1,
                            OperationClaimId = 1
                        });
                });

            modelBuilder.Entity("Core.Entities.Concrete.CustomerOperationClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<int>("OperationClaimId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("CustomerOperationClaims", "dbo");
                });

            modelBuilder.Entity("Core.Entities.Concrete.OperationClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("OperationClaims", "dbo");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "admin"
                        },
                        new
                        {
                            Id = 2,
                            Name = "customer"
                        });
                });

            modelBuilder.Entity("Entities.Concrete.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("TopCategoryId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Categories", "dbo");
                });

            modelBuilder.Entity("Entities.Concrete.City", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Cities", "dbo");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "İstanbul"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Kocaeli"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Bursa"
                        });
                });

            modelBuilder.Entity("Entities.Concrete.Customer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Customers", "dbo");
                });

            modelBuilder.Entity("Entities.Concrete.District", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CityId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.ToTable("Districts", "dbo");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CityId = 1,
                            Name = "Ataşehir"
                        },
                        new
                        {
                            Id = 2,
                            CityId = 1,
                            Name = "Üsküdar"
                        },
                        new
                        {
                            Id = 3,
                            CityId = 1,
                            Name = "Ümraniye"
                        },
                        new
                        {
                            Id = 4,
                            CityId = 1,
                            Name = "Beşikteş"
                        },
                        new
                        {
                            Id = 5,
                            CityId = 1,
                            Name = "Şişli"
                        },
                        new
                        {
                            Id = 6,
                            CityId = 2,
                            Name = "İzmit"
                        },
                        new
                        {
                            Id = 7,
                            CityId = 2,
                            Name = "Körfez"
                        },
                        new
                        {
                            Id = 8,
                            CityId = 2,
                            Name = "Gebze"
                        },
                        new
                        {
                            Id = 9,
                            CityId = 2,
                            Name = "Derince"
                        },
                        new
                        {
                            Id = 10,
                            CityId = 2,
                            Name = "Gölcük"
                        },
                        new
                        {
                            Id = 11,
                            CityId = 3,
                            Name = "Nilüfer"
                        },
                        new
                        {
                            Id = 12,
                            CityId = 3,
                            Name = "Yıldırım"
                        },
                        new
                        {
                            Id = 13,
                            CityId = 3,
                            Name = "Osmangazi"
                        },
                        new
                        {
                            Id = 14,
                            CityId = 3,
                            Name = "Gemlik"
                        },
                        new
                        {
                            Id = 15,
                            CityId = 3,
                            Name = "Mudanya"
                        });
                });

            modelBuilder.Entity("Entities.Concrete.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Products", "dbo");
                });

            modelBuilder.Entity("Entities.Concrete.District", b =>
                {
                    b.HasOne("Entities.Concrete.City", null)
                        .WithMany("Districts")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Entities.Concrete.City", b =>
                {
                    b.Navigation("Districts");
                });
#pragma warning restore 612, 618
        }
    }
}
